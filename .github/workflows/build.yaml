on:
  workflow_dispatch:

env:
  RELEASE_NAME: SteamShortcut
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        run: dotnet restore
      - name: Set initial RELEASE_VERSION
        shell: bash
        run: |
          # Если файл VERSION содержит "0.1" (без лишних пробелов)
          majorMinor=$(cat VERSION | tr -d '[:space:]')

          if [ -z "$(git tag --list)" ]; then
            nextVer="${majorMinor}.0"
          else
            lastVer=$(git tag --sort=-v:refname --list "${majorMinor}.*" | head -n1)
            if [ -z "$lastVer" ]; then
              nextVer="${majorMinor}.0"
            else
              IFS='.' read -ra parts <<< "$lastVer"
              nextPatch=$((parts[2] + 1))
              nextVer="${parts[0]}.${parts[1]}.$nextPatch"
            fi
          fi

          if [[ ! "$nextVer" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $nextVer"
            exit 1
          fi

          echo "RELEASE_VERSION=$nextVer" >> $GITHUB_ENV
          echo "Using version: $nextVer"
      - name: Build Release
        shell: bash
        run: |
          dotnet publish ${{ env.RELEASE_NAME }}/${{ env.RELEASE_NAME }}.csproj \
            -c Release \
            -p:PublishSingleFile=true \
            --self-contained false \
            --output "${{ env.RELEASE_NAME }}-${{ env.RELEASE_VERSION }}/" \
            "/p:AssemblyVersion=${{ env.RELEASE_VERSION }}" \
            "/p:FileVersion=${{ env.RELEASE_VERSION }}" \
            "/p:Version=${{ env.RELEASE_VERSION }}" \
            -p:DebugType=None \
            -p:DebugSymbols=false
      - name: Test
        run: dotnet test --no-restore --verbosity normal
      - uses: vimtor/action-zip@v1
        with:
          files: ${{ env.RELEASE_NAME }}-${{ env.RELEASE_VERSION }}
          dest: ${{ env.RELEASE_NAME }}-${{ env.RELEASE_VERSION }}-portable.zip
          recursive: true
      - name: Update version in RELEASE.md
        shell: bash
        run: |
          sed -i 's|#{GIT_TAG_NAME}|${{ env.RELEASE_VERSION }}|g' RELEASE.md
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_VERSION }}
          artifacts: "*.zip"
          prerelease: true
          generateReleaseNotes: true
          bodyFile: RELEASE.md
