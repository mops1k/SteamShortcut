on:
  workflow_dispatch:

env:
  RELEASE_NAME: SteamShortcut
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        run: dotnet restore
      - name: Set RELEASE_VERSION
        shell: bash
        run: |
          majorVer=$(cat VERSION | tr -d '[:space:]')  # Удаляем все пробелы из VERSION
          lastVer=$(git tag --sort version:refname --list "$majorVer.*" | tail -n1 | xargs)  # xargs для trim

          if [[ -n "$lastVer" ]]; then
            IFS='.' read -ra verParts <<< "$lastVer"
            newPatch=$((verParts[2] + 1))
            nextVer="${verParts[0]}.${verParts[1]}.$newPatch"
          else
            nextVer="${majorVer}.0"
          fi

          # Финалная очистка версии
          nextVer=$(echo "$nextVer" | tr -d '[:space:]')
          echo "MajorVer=$majorVer LastVer=$lastVer NextVer=$nextVer"
          echo "RELEASE_VERSION=${nextVer}" >> $GITHUB_ENV
      - name: Build Single File Release
        shell: pwsh
        run: |
          $RELEASE_VERSION = "${{ env.RELEASE_VERSION }}".Trim()
          dotnet publish ${{ env.RELEASE_NAME }}/${{ env.RELEASE_NAME }}.csproj `
            -p:PublishSingleFile=true `
            --self-contained false `
            --output "${{ env.RELEASE_NAME }}-$RELEASE_VERSION/" `
            "/p:AssemblyVersion=$RELEASE_VERSION" `
            "/p:Version=$RELEASE_VERSION" `
            "/p:VersionSuffix=" `
            "/p:ExtraDefineConstants=PRODUCTION_BUILD" `
            -p:DebugType=None `
            -p:DebugSymbols=false
      - name: Test
        run: dotnet test --no-restore --verbosity normal
      - uses: vimtor/action-zip@v1
        with:
          files: ${{ env.RELEASE_NAME }}-${{ env.RELEASE_VERSION }}
          dest: ${{ env.RELEASE_NAME }}-${{ env.RELEASE_VERSION }}-portable.zip
          recursive: true
      - name: Update version in RELEASE.md
        shell: bash
        run: |
          sed -i 's|#{GIT_TAG_NAME}|${{ env.RELEASE_VERSION }}|g' RELEASE.md
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_VERSION }}
          artifacts: "*.zip"
          prerelease: true
          generateReleaseNotes: true
          bodyFile: RELEASE.md
